macro(APPEND_GLOB VAR)
  file(GLOB LOCAL_TMP_VAR ${ARGN})
  list(APPEND ${VAR} ${LOCAL_TMP_VAR})
endmacro()

macro(PPT_POSTPROCESS)
  # ############################################################################
  # Installation instructions

  include(GNUInstallDirs)
  set(INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/ppt)

  install(
    TARGETS ppt
    EXPORT ppt-targets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})

  # This is required so that the exported target has the name JSONUtils and not
  # jsonutils
  set_target_properties(ppt PROPERTIES EXPORT_NAME ppt)

  install(DIRECTORY ${PPT_TOP_SOURCE_DIR}/include/
          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
  # Remember to install autogenerated file too
  install(FILES ${PPT_TOP_BUILD_DIR}/src/include/ppt/PPT_config.hpp
          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ppt)

  # Export the targets to a script
  install(
    EXPORT ppt-targets
    FILE pptTargets.cmake
    NAMESPACE PPT::
    DESTINATION ${INSTALL_CONFIGDIR})

  # Create a ConfigVersion.cmake file
  include(CMakePackageConfigHelpers)
  write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/pptConfigVersion.cmake
    VERSION ${ppt_VERSION}
    COMPATIBILITY AnyNewerVersion)

  configure_package_config_file(
    ${PPT_TOP_SOURCE_DIR}/cmake/pptConfig.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/pptConfig.cmake
    INSTALL_DESTINATION ${INSTALL_CONFIGDIR})

  # Install the config, configversion and custom find modules
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/pptConfig.cmake
                ${CMAKE_CURRENT_BINARY_DIR}/pptConfigVersion.cmake
          DESTINATION ${INSTALL_CONFIGDIR})

  # ############################################################################
  # Exporting from the build tree
  export(
    EXPORT ppt-targets
    FILE ${CMAKE_CURRENT_BINARY_DIR}/pptTargets.cmake
    NAMESPACE PPT::)

  # Register package in the User Package Registry
  export(PACKAGE ppt)

endmacro()
